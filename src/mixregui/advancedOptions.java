/*
 *MixWild, a program to model subject-level slope and variance on continuous or ordinal outcomes
    Copyright (C) 2018 Genevieve Dunton & Donald Hedeker

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

	Principal Investigators:
	Genevieve Dunton, PhD MPH
	University of Southern California
	dunton@usc.edu
	
	Donald Hedeker, PhD
	University of Chicago
	DHedeker@health.bsd.uchicago.edu
 */
package mixregui;

import def_lib.MixLibrary;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import mixregui.SystemLogger;
import static mixregui.stageOneRegs.levelOneList;

/**
 * All the advanced functions to support the model
 *
 * @author adityaponnada
 */
public class advancedOptions extends javax.swing.JFrame {

    MixLibrary defFile3;
    boolean osWindows = System.getProperty("os.name").toLowerCase().contains("windows");
    static boolean disaggregateEnabled = false;

    /**
     * Creates new form advancedOptions
     */
    public advancedOptions() {
        initComponents();
        this.setResizable(false);
        run32BitCheckBox.setVisible(osWindows);

        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);

        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        //Add tool tips to advanced options
//        meanSubmodelCheckBox.setToolTipText("Check mean submodel");
//        BSVarianceCheckBox.setToolTipText("Check mean submodel");
//        WSVarianceCheckBox.setToolTipText("Tool tip here");
//        convergenceCriteria.setToolTipText("Tool tip here");
//        quadriturePoints.setToolTipText("Tool tip here");
//        adaptiveQuadritureCheckBox.setToolTipText("Tool tip here");
//        maximumIterations.setToolTipText("Tool tip here");
//        //standardizedCoeff.setToolTipText("Tool tip here");
//        ridgeSpinner.setToolTipText("Tool tip here");
//        centerRegressorsCheckBox.setToolTipText("Tool tip here");

        //set default selections
        meanSubmodelCheckBox.setSelected(true);
        BSVarianceCheckBox.setSelected(true);
        WSVarianceCheckBox.setSelected(true);
        adaptiveQuadritureCheckBox.setSelected(true);
        discardSubjectsCheckBox.setSelected(false);

        resampleCheckBox.setSelected(true);

        //variables to save values:
        if (mixregGUI.notIncludeStageTwo == true) {

            resampleSpinner.setEnabled(false);
            resampleCheckBox.setEnabled(false);

        } else {

            resampleSpinner.setEnabled(true);
            resampleCheckBox.setEnabled(true);

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        meanSubmodelCheckBox = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        BSVarianceCheckBox = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        WSVarianceCheckBox = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        adaptiveQuadritureCheckBox = new javax.swing.JCheckBox();
        quadriturePoints = new javax.swing.JSpinner();
        jSeparator1 = new javax.swing.JSeparator();
        convergenceCriteria = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        maximumIterations = new javax.swing.JSpinner();
        ridgeSpinner = new javax.swing.JSpinner();
        jLabel15 = new javax.swing.JLabel();
        centerRegressorsCheckBox = new javax.swing.JCheckBox();
        jLabel9 = new javax.swing.JLabel();
        resampleSpinner = new javax.swing.JSpinner();
        resampleCheckBox = new javax.swing.JCheckBox();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        discardSubjectsCheckBox = new javax.swing.JCheckBox();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        advancedOptionsSubmit = new javax.swing.JButton();
        advancedOptions_resetButton = new javax.swing.JButton();
        advancedOptionsCancel = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        run32BitCheckBox = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        enableDisaggregateCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Options ...");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Mean Intercept:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 7, -1, -1));

        meanSubmodelCheckBox.setToolTipText("Include submodel intercepts (Default is on)");
        meanSubmodelCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                meanSubmodelCheckBoxActionPerformed(evt);
            }
        });
        jPanel1.add(meanSubmodelCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(225, 7, -1, -1));

        jLabel2.setText("BS Variance Intercept:  ");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 36, -1, -1));

        BSVarianceCheckBox.setToolTipText("Include submodel intercepts (default is on)");
        BSVarianceCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BSVarianceCheckBoxActionPerformed(evt);
            }
        });
        jPanel1.add(BSVarianceCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(225, 36, -1, -1));

        jLabel3.setText("WS Variance Intercept:  ");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 65, -1, -1));

        WSVarianceCheckBox.setToolTipText("Include submodel intercepts (default is on)");
        WSVarianceCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WSVarianceCheckBoxActionPerformed(evt);
            }
        });
        jPanel1.add(WSVarianceCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(225, 65, -1, -1));

        jLabel4.setText("Convergence Criteria:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 106, -1, 30));

        jLabel5.setText("Quadrature Points:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 136, -1, 50));

        jLabel6.setText("Adaptive Quadrature:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, -1, -1));

        adaptiveQuadritureCheckBox.setToolTipText("Adaptive quadrature, usually on to maximize convergence");
        adaptiveQuadritureCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adaptiveQuadritureCheckBoxActionPerformed(evt);
            }
        });
        jPanel1.add(adaptiveQuadritureCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 190, -1, -1));

        quadriturePoints.setModel(new javax.swing.SpinnerNumberModel(11, 1, 255, 1));
        quadriturePoints.setToolTipText("Number of quadrature points (usually set to 10 or 11, however more points may be necessary for complex models)");
        jPanel1.add(quadriturePoints, new org.netbeans.lib.awtextra.AbsoluteConstraints(159, 150, 90, -1));
        jPanel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 240, -1));

        convergenceCriteria.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        convergenceCriteria.setText("0.00001");
        convergenceCriteria.setToolTipText("Convergence requirement for the maximum correction (change to aid in convergence)");
        convergenceCriteria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convergenceCriteriaActionPerformed(evt);
            }
        });
        jPanel1.add(convergenceCriteria, new org.netbeans.lib.awtextra.AbsoluteConstraints(157, 110, 90, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 21, 260, 230));

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel7.setText("Maximum Iterations:");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 12, -1, -1));

        jLabel11.setText("Ridge:");
        jPanel2.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 46, -1, 20));

        maximumIterations.setModel(new javax.swing.SpinnerNumberModel(200, 1, null, 100));
        maximumIterations.setToolTipText("Maximum number of iterations");
        jPanel2.add(maximumIterations, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 10, 69, -1));

        ridgeSpinner.setModel(new javax.swing.SpinnerNumberModel(0.1d, 0.0d, 1.0d, 0.01d));
        ridgeSpinner.setToolTipText("Initial value for a ridge (a numeric value that adds to the diagonal of the second derivative matrix, which can aid in convergence of the solution; usually set to 0 or some small fractional value)");
        jPanel2.add(ridgeSpinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 40, 70, -1));

        jLabel15.setText("Standardize All Regressors?");
        jPanel2.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, -1, -1));

        centerRegressorsCheckBox.setToolTipText("Center and scale all variables");
        centerRegressorsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                centerRegressorsCheckBoxActionPerformed(evt);
            }
        });
        jPanel2.add(centerRegressorsCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 80, -1, -1));

        jLabel9.setText("Resample Stage 2:");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, -1, -1));

        resampleSpinner.setModel(new javax.swing.SpinnerNumberModel(500, 1, 10000, 1));
        resampleSpinner.setToolTipText("Select the number of resamples for stage 2");
        jPanel2.add(resampleSpinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 190, 70, -1));

        resampleCheckBox.setToolTipText("Select to resample stage 2 analysis");
        resampleCheckBox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        resampleCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resampleCheckBoxActionPerformed(evt);
            }
        });
        jPanel2.add(resampleCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 160, -1, -1));

        jLabel10.setText("No. of  Samples:");
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 110, 20));

        jLabel12.setText("Discard Subjects with no Variance?");
        jPanel2.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 230, -1));

        discardSubjectsCheckBox.setToolTipText("Discard all the subjects with no variance");
        discardSubjectsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discardSubjectsCheckBoxActionPerformed(evt);
            }
        });
        jPanel2.add(discardSubjectsCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 110, -1, -1));
        jPanel2.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 142, 240, 0));
        jPanel2.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 280, 10));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(294, 21, 300, 230));

        advancedOptionsSubmit.setText("Submit");
        advancedOptionsSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                advancedOptionsSubmitActionPerformed(evt);
            }
        });
        getContentPane().add(advancedOptionsSubmit, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 360, 90, -1));

        advancedOptions_resetButton.setText("Reset");
        advancedOptions_resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                advancedOptions_resetButtonActionPerformed(evt);
            }
        });
        getContentPane().add(advancedOptions_resetButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 360, 90, -1));

        advancedOptionsCancel.setText("Cancel");
        advancedOptionsCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                advancedOptionsCancelActionPerformed(evt);
            }
        });
        getContentPane().add(advancedOptionsCancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 360, 90, -1));

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        run32BitCheckBox.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        run32BitCheckBox.setText("Run in 32-bit mode (Experimental: for older Windows-based machines)");
        run32BitCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                run32BitCheckBoxActionPerformed(evt);
            }
        });
        jPanel3.add(run32BitCheckBox);

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 310, 570, 40));

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        enableDisaggregateCheckBox.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        enableDisaggregateCheckBox.setText("Enable disaggregate");
        enableDisaggregateCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enableDisaggregateCheckBoxActionPerformed(evt);
            }
        });
        jPanel4.add(enableDisaggregateCheckBox);

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, 570, 40));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void meanSubmodelCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_meanSubmodelCheckBoxActionPerformed
        // TODO add your handling code here:
        SystemLogger.LOGGER.log(Level.FINE, "meanSubmodelCheckBoxActionPerformed");

    }//GEN-LAST:event_meanSubmodelCheckBoxActionPerformed

    private void BSVarianceCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BSVarianceCheckBoxActionPerformed
        // TODO add your handling code here:
        SystemLogger.LOGGER.log(Level.FINE, "BSVarianceCheckBoxActionPerformed");
    }//GEN-LAST:event_BSVarianceCheckBoxActionPerformed

    private void WSVarianceCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WSVarianceCheckBoxActionPerformed
        SystemLogger.LOGGER.log(Level.FINE, "WSVarianceCheckBoxActionPerformed");
    }//GEN-LAST:event_WSVarianceCheckBoxActionPerformed

    private void adaptiveQuadritureCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adaptiveQuadritureCheckBoxActionPerformed
        // TODO add your handling code here:
        SystemLogger.LOGGER.log(Level.FINE, "adaptiveQuadritureCheckBoxActionPerformed");
    }//GEN-LAST:event_adaptiveQuadritureCheckBoxActionPerformed

    private void advancedOptionsSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_advancedOptionsSubmitActionPerformed
        SystemLogger.LOGGER.log(Level.FINE, "advancedOptionsSubmitActionPerformed");
        update_trigger_AdvancedOptionsSubmit();

    }//GEN-LAST:event_advancedOptionsSubmitActionPerformed

    private void centerRegressorsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_centerRegressorsCheckBoxActionPerformed
        // TODO add your handling code here:
        SystemLogger.LOGGER.log(Level.FINE, "centerRegressorsCheckBoxActionPerformed");
    }//GEN-LAST:event_centerRegressorsCheckBoxActionPerformed

    private void advancedOptions_resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_advancedOptions_resetButtonActionPerformed
        // TODO add your handling code here:
        SystemLogger.LOGGER.log(Level.FINE, "advancedOptions_resetButtonActionPerformed");

        meanSubmodelCheckBox.setSelected(false);
        BSVarianceCheckBox.setSelected(false);
        WSVarianceCheckBox.setSelected(false);

        convergenceCriteria.setText("0.00001");
        quadriturePoints.setValue(11);

        adaptiveQuadritureCheckBox.setSelected(false);
        centerRegressorsCheckBox.setSelected(false);

        maximumIterations.setValue(200);
        // missingValuesCheckBox.setSelected(false);
        //standardizedCoeff.setSelected(false);
        ridgeSpinner.setValue(0.15);
        resampleSpinner.setValue(500);

    }//GEN-LAST:event_advancedOptions_resetButtonActionPerformed

    private void advancedOptionsCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_advancedOptionsCancelActionPerformed
        // TODO add your handling code here:
        SystemLogger.LOGGER.log(Level.FINE, "advancedOptionsCancelActionPerformed");
        this.dispose();
    }//GEN-LAST:event_advancedOptionsCancelActionPerformed

    private void resampleCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resampleCheckBoxActionPerformed
        SystemLogger.LOGGER.log(Level.FINE, "resampleCheckBoxActionPerformed");

        update_trigger_resampleCheckBox();
    }//GEN-LAST:event_resampleCheckBoxActionPerformed


    private void run32BitCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_run32BitCheckBoxActionPerformed
        // TODO add your handling code here:
        SystemLogger.LOGGER.log(Level.FINE, "run32BitCheckBoxActionPerformed");
        update_trigger_run32BitCheckBox();
    }//GEN-LAST:event_run32BitCheckBoxActionPerformed

    private void discardSubjectsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discardSubjectsCheckBoxActionPerformed
        SystemLogger.LOGGER.log(Level.FINE, "discardSubjectsCheckBoxActionPerformed");
    }//GEN-LAST:event_discardSubjectsCheckBoxActionPerformed

    private void convergenceCriteriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convergenceCriteriaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_convergenceCriteriaActionPerformed

    private void enableDisaggregateCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableDisaggregateCheckBoxActionPerformed
        update_enableDisaggregate();
    }//GEN-LAST:event_enableDisaggregateCheckBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(advancedOptions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(advancedOptions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(advancedOptions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(advancedOptions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new advancedOptions().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox BSVarianceCheckBox;
    private javax.swing.JCheckBox WSVarianceCheckBox;
    private javax.swing.JCheckBox adaptiveQuadritureCheckBox;
    private javax.swing.JButton advancedOptionsCancel;
    private javax.swing.JButton advancedOptionsSubmit;
    private javax.swing.JButton advancedOptions_resetButton;
    private javax.swing.JCheckBox centerRegressorsCheckBox;
    private javax.swing.JTextField convergenceCriteria;
    private javax.swing.JCheckBox discardSubjectsCheckBox;
    private javax.swing.JCheckBox enableDisaggregateCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSpinner maximumIterations;
    private javax.swing.JCheckBox meanSubmodelCheckBox;
    private javax.swing.JSpinner quadriturePoints;
    private javax.swing.JCheckBox resampleCheckBox;
    private javax.swing.JSpinner resampleSpinner;
    private javax.swing.JSpinner ridgeSpinner;
    private javax.swing.JCheckBox run32BitCheckBox;
    // End of variables declaration//GEN-END:variables

//check if mean sub model is checked in advanced options    
    public int isMeanSubModelChecked() {

        int checked = 0;

        if (meanSubmodelCheckBox.isSelected() == true) {
            checked = 0;
        } else {
            checked = 1;
        }

        return checked;
    }

// check if BS variance is checked
    public int isBSVarianceChecked() {

        int checked = 0;

        if (BSVarianceCheckBox.isSelected() == true) {
            checked = 0;
        } else {
            checked = 1;
        }

        return checked;
    }

// check if BS variance is checked
    public int isWSVarianceChecked() {

        int checked = 0;

        if (WSVarianceCheckBox.isSelected() == true) {
            checked = 0;
        } else {
            checked = 1;
        }

        return checked;
    }

// get the convergence criteria
    public String getConvergenceCriteria() {

        return convergenceCriteria.getText();

    }

    public void setConvergenceCriteria(String value_string) {
        convergenceCriteria.setText(value_string);
    }

// get Quadriture points
    public int getQuadriturePoints() {

        return (int) quadriturePoints.getValue();
    }

    public void setQuadriturePoints(int value_int) {
        quadriturePoints.setValue(value_int);
    }

// check if adaptive quadriture is checked
    public int isAdaptiveQuadritureChecked() {
        int checked = 0;

        if (adaptiveQuadritureCheckBox.isSelected() == true) {
            checked = 1;
        } else {

            checked = 0;
        }

        return checked;
    }

// get the convergence criteria
    public Integer getMaximumIterations() {

        return (Integer) maximumIterations.getValue();

    }

    public void setMaximumIterations(int value_int) {

        maximumIterations.setValue(value_int);

    }

// get the ridge value
    public Double getRidge() {

        return (Double) ridgeSpinner.getValue();

    }

    public void setRidgeSpinner(double value_double) {
        ridgeSpinner.setValue(value_double);
    }

    public int isCenterRegressorChecked() {
        int value = 0;

        if (centerRegressorsCheckBox.isSelected()) {
            value = 1;
        } else {
            value = 0;
        }

        return value;
    }

//    public int isResamplingChecked() {
//
//        int checked = 0;
//
//        if (resampleCheckBox.isSelected() == true) {
//            checked = 1;
//        } else {
//            checked = 0;
//        }
//
//        return checked;
//    }
    public String getResamplingRate() {

        return String.valueOf(resampleSpinner.getValue());

    }

    public String getDiscardSubjectsCheck() {

        String check = "0";

        if (discardSubjectsCheckBox.isSelected()) {

            check = "1";
        } else {
            check = "0";

        }

        return check;
    }

    public boolean isRun32BitChecked() {

        boolean run32 = false;

        if (run32BitCheckBox.isSelected()) {

            run32 = true;

        } else {

            run32 = false;

        }

        return run32;
    }

    public void setRun32BitCheckBox(boolean turnon) {
        run32BitCheckBox.setSelected(turnon);
    }

    public boolean isMeanSubmodelCheckBoxChecked() {
        return meanSubmodelCheckBox.isSelected();
    }

    public void setMeanSubmodelCheckBox(boolean turnon) {
        meanSubmodelCheckBox.setSelected(turnon);
    }

    boolean isBSVarianceCheckBoxChecked() {
        return BSVarianceCheckBox.isSelected();
    }

    public void setBSVarianceCheckBox(boolean turnon) {
        BSVarianceCheckBox.setSelected(turnon);
    }

    boolean isWSVarianceCheckBoxChecked() {
        return WSVarianceCheckBox.isSelected();
    }

    public void setWSVarianceCheckBox(boolean turnon) {
        WSVarianceCheckBox.setSelected(turnon);
    }

    boolean isCenterRegressorsCheckBoxChecked() {
        return centerRegressorsCheckBox.isSelected();
    }

    public void setCenterRegressorsCheckBox(boolean turnon) {
        centerRegressorsCheckBox.setSelected(turnon);
    }

    boolean isDiscardSubjectsCheckBoxChecked() {
        return discardSubjectsCheckBox.isSelected();
    }

    public void setDiscardSubjectsCheckBox(boolean turnon) {
        discardSubjectsCheckBox.setSelected(turnon);
    }

    boolean isResampleCheckBoxChecked() {
        return resampleCheckBox.isSelected();
    }

    public void setResampleCheckBox(boolean turnon) {
        resampleCheckBox.setSelected(turnon);
    }

    boolean isAdaptiveQuadritureCheckBoxChecked() {
        return adaptiveQuadritureCheckBox.isSelected();
    }

    public void setAdaptiveQuadritureCheckBox(boolean turnon) {
        adaptiveQuadritureCheckBox.setSelected(turnon);
    }

    int getResampleSpinner() {
        return (int) resampleSpinner.getValue();
    }

    public void setResampleSpinner(int value_int) {
        resampleSpinner.setValue(value_int);
    }

    public void update_trigger_AdvancedOptionsSubmit() {
        // TODO add your handling code here:
        //defFile3 = mixregGUI.defFile;
        int tryCount = 0;
        int catchCount = 0;

        //Assign parameters to definition library
        try {
            mixregGUI.defFile.setAdvancedConvergenceCriteria(String.valueOf(convergenceCriteria.getText()));
            System.out.println("From defHelper | Convergence: " + mixregGUI.defFile.getAdvancedConvergenceCriteria());
            tryCount = 1;

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Caution!", JOptionPane.INFORMATION_MESSAGE);
            Logger.getLogger(advancedOptions.class.getName()).log(Level.SEVERE, null, ex);
            catchCount = 1;
        }

        try {
            mixregGUI.defFile.setAdvancedRandomScaleCutoff("0");
            System.out.println("CUT OFF: " + mixregGUI.defFile.getAdvancedRandomScaleCutoff());
            tryCount = 1;
        } catch (Exception ex) {
            Logger.getLogger(mixregGUI.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Caution!", JOptionPane.INFORMATION_MESSAGE);
            catchCount = 1;
        }

        try {
            mixregGUI.defFile.setAdvancedDiscardNoVariance(getDiscardSubjectsCheck());
            System.out.println("DISCARD SUBJECTS: " + mixregGUI.defFile.getAdvancedDiscardNoVariance());
            tryCount = 1;
        } catch (Exception ex) {
            Logger.getLogger(advancedOptions.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Caution!", JOptionPane.INFORMATION_MESSAGE);
            catchCount = 1;
        }

        //set quadrature points
        try {
            mixregGUI.defFile.setAdvancedQuadPoints(String.valueOf(quadriturePoints.getValue()));
            System.out.println("From defHelper | Quadriture Points: " + mixregGUI.defFile.getAdvancedQuadPoints());
            tryCount = 1;
        } catch (Exception ex) {
            catchCount = 1;
            Logger.getLogger(advancedOptions.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Caution!", JOptionPane.INFORMATION_MESSAGE);
        }

        try {
            mixregGUI.defFile.setAdvancedMaxIterations(String.valueOf(getMaximumIterations()));
            System.out.println("From defHelper | Maximum Iteraions: " + mixregGUI.defFile.getAdvancedMaxIterations());
            tryCount = 1;
        } catch (Exception ex) {
            catchCount = 1;
            Logger.getLogger(advancedOptions.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Caution!", JOptionPane.INFORMATION_MESSAGE);
        }

        try {
            mixregGUI.defFile.setAdvancedMeanIntercept(String.valueOf(isMeanSubModelChecked()));
            System.out.println("From defHelper | Mean SubModel Checked?: " + mixregGUI.defFile.getAdvancedMeanIntercept());
            tryCount = 1;
        } catch (Exception ex) {
            catchCount = 1;
            Logger.getLogger(advancedOptions.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Caution!", JOptionPane.INFORMATION_MESSAGE);
        }

        try {
            mixregGUI.defFile.setAdvancedRandomIntercept(String.valueOf(isBSVarianceChecked()));
//            mixregGUI.defFile.setModelBetweenInt(String.valueOf(isBSVarianceChecked()));
            System.out.println("From defHelper | BS SubModel Checked?: " + mixregGUI.defFile.getAdvancedRandomIntercept());
//            System.out.println("From defHelper | BS SubModel Checked?: " + mixregGUI.defFile.getModelBetweenInt());
            tryCount = 1;
        } catch (Exception ex) {
            catchCount = 1;
            Logger.getLogger(advancedOptions.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Caution!", JOptionPane.INFORMATION_MESSAGE);
        }

        try {
            mixregGUI.defFile.setAdvancedScaleIntercept(String.valueOf(isWSVarianceChecked()));
//            mixregGUI.defFile.setModelWithinInt(String.valueOf(isWSVarianceChecked()));
            System.out.println("From defHelper | WS SubModel Checked?: " + mixregGUI.defFile.getAdvancedScaleIntercept());
//            System.out.println("From defHelper | WS SubModel Checked?: " + mixregGUI.defFile.getModelWithinInt());
            tryCount = 1;
        } catch (Exception ex) {
            catchCount = 1;
            Logger.getLogger(advancedOptions.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Caution!", JOptionPane.INFORMATION_MESSAGE);
        }

        try {
            mixregGUI.defFile.setAdvancedAdaptiveQuad(String.valueOf(isAdaptiveQuadritureChecked()));
            System.out.println("From defHelper | Adaptive Quadriture Checked?: " + mixregGUI.defFile.getAdvancedAdaptiveQuad());
            tryCount = 1;
        } catch (Exception ex) {
            catchCount = 1;
            Logger.getLogger(advancedOptions.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Caution!", JOptionPane.INFORMATION_MESSAGE);
        }

        try {
            mixregGUI.defFile.setAdvancedInitialRidge(String.valueOf(getRidge()));
            System.out.println("From defHelper | Ridge: " + mixregGUI.defFile.getAdvancedInitialRidge());
            tryCount = 1;
        } catch (Exception ex) {
            catchCount = 1;
            Logger.getLogger(advancedOptions.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Caution!", JOptionPane.INFORMATION_MESSAGE);
        }

        try {
            mixregGUI.defFile.setAdvancedCenterScaleVariables(String.valueOf(isCenterRegressorChecked()));
            System.out.println("From defHelper | Scale Regressor: " + mixregGUI.defFile.getAdvancedCenterScaleVariables());
            tryCount = 1;
        } catch (Exception ex) {
            Logger.getLogger(advancedOptions.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Caution!", JOptionPane.INFORMATION_MESSAGE);
        }

        try {
            mixregGUI.defFile.setAdvancedResampleCount(getResamplingRate());
            System.out.println("From defHelper | Resample count: " + mixregGUI.defFile.getAdvancedResampleCount());
        } catch (Exception ex) {
            Logger.getLogger(advancedOptions.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Caution!", JOptionPane.INFORMATION_MESSAGE);
        }

        if (catchCount == 0) {
            //do nothing
            this.dispose();
        }
    }

    public void update_trigger_resampleCheckBox() {
        if (resampleCheckBox.isSelected()) {
            resampleSpinner.setEnabled(true);
        } else {
            resampleSpinner.setEnabled(false);
        }
    }

    public void update_trigger_run32BitCheckBox() {
        if (run32BitCheckBox.isSelected()) {
            mixregGUI.defFile.win32 = Boolean.TRUE;
        } else {
            mixregGUI.defFile.win32 = Boolean.FALSE;
        }
    }

    public void update_enableDisaggregate() {
        if (enableDisaggregateCheckBox.isSelected()) {
            disaggregateEnabled = true;
            mixregGUI.mxr.updateStageOneLevelOneGrid(levelOneList);
        } else {
            disaggregateEnabled = false;
            mixregGUI.mxr.updateStageOneLevelOneGrid(levelOneList);
        }
    }
}
